#!/bin/bash
# Backup host
# Oliver Ratzesberger
# MIT License

# Setup logger limit to last 10 runs
LOGDIR=/tmp
LOGFILE="$LOGDIR/`basename $0`.`date +%Y%m%d%H%M%S`.log"
exec &> >(tee -a $LOGFILE)
( cd /tmp && rm -f $(ls -1t $LOGDIR/`basename $0`* | tail -n +10) )

# Default settings
DEBUG=0
BACKUPDIR=/root/backups
MAXBACKUPS=5

# As we are working with sym links we also need to know the real path to here
REALPATH=`realpath ${BASH_SOURCE[0]}`
REALDIR=`dirname "$REALPATH"`
THIS=`basename "$0"`

usage()
{
  cat << EOF
usage: $0 [options]

Backup the entire SentientHome host into a restoreable tar

OPTIONS:
  --help|-h         Show this message
  --debug|-d        Debug mode

EOF
  exit 1
}

log()
{
  # Common logging format use in place of echo when possible
  echo `date +%Y%m%d%H%M%S%3N` "("$THIS")" "$1" "$2" "$3" "$4" "$5"
}

header()
{
  log SentientHome
  log
  log "Module:         " $THIS
  log "Path:           " "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  log "Realpath:       " $REALDIR
  log "Logfile:        " $LOGFILE
  log "Host:           " `uname -n`
  log "OS:             " `uname -o`
  log "Kernel-Name:    " `uname -s`
  log "Kernel-Release: " `uname -r`
  log "Kernel-Version: " `uname -v`
  log "Machine:        " `uname -m`
  log "Processor:      " `uname -p`
  log "Platform:       " `uname -i`
  log
  log "git Version:    " `git --version`
  log
  log "git Revision:   " "$( cd $REALDIR && git describe --tags --always HEAD )"
  log "git Dirty:      " "$( cd $REALDIR && git status --porcelain )"
  log
}

# translate long options to short
for arg
do
  delim=""
  case "${arg}" in
    --help) args="${args}-h ";;
    --debug) args="${args}-d ";;
    # pass through anything else
    *) [[ "${arg:0:1}" == "-" ]] || delim="\""
      args="${args}${delim}${arg}${delim} ";;
  esac
done
# reset the translated args
eval set -- "$args"
# now we can process with getopt
while getopts "hd" opt; do
  case $opt in
    h)  usage ;;
    d)  DEBUG=1 ;;
    \?) usage ;;
    :)
      echo "Option -$OPTARG requires an argument\n"
      usage
    ;;
  esac
done
shift $((OPTIND -1))

# Start by logging environment info
header

if [ $DEBUG -eq 1 ]; then
  set -x
  OPT_OUTPUT="/dev/stdout"
else
  OPT_OUTPUT="/dev/null"
fi

log "Creating backup dir: $BACKUPDIR ..."
mkdir -p $BACKUPDIR 1>$OPT_OUTPUT
if [ $? -ne 0 ]; then
  log "üëé  Error creating backup dir: $BACKUPDIR"
  exit 2
fi

BACKUPFILE="$BACKUPDIR/`uname -n`.`date +%Y%m%d%H%M%S`.backup.tar.gz"
log "Creating backup $BACKUPFILE ..."
tar --exclude=$BACKUPDIR --one-file-system -cvzf $BACKUPFILE / /boot 1>$OPT_OUTPUT
if [ $? -ne 0 ]; then
  log "üëé  Error creating back: $BACKUPFILE"
  exit 3
fi

TRIMLIST=$((MAXBACKUPS + 1))
log "Removing older backups files in $BACKUPDIR ... "
log $( cd $BACKUPDIR && rm -f $(ls -1t `uname -n`* $BACKUPDIR | tail -n +$TRIMLIST) )
if [ $? -ne 0 ]; then
  log "üëé  Error removing older backup files in $BACKUPDIR"
  exit 3
fi

if [ $? -eq 0 ]; then
  log "üç∫  Finished."
else
  log "üëé  Someting went wrong."
fi
