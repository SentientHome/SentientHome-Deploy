#!/bin/bash
# Add a new host to the SentientHome Master
# Oliver Ratzesberger
# MIT License

# Setup logger limit to last 10 runs
LOGDIR=/tmp
LOGFILE="$LOGDIR/`basename $0`.`date +%Y%m%d%H%M%S`.log"
exec &> >(tee -a $LOGFILE)
( cd /tmp && rm -f $(ls -1t $LOGDIR/`basename $0`* | tail -n +10) )

SENTIENTHOME_PREFIX='/usr/local'

# Default settings
DEBUG=0
FORCE=0
REBOOT=0
TARGETPATH=/usr/local/bin/

# As we are working with sym links we also need to know the real path to here
REALPATH=`realpath ${BASH_SOURCE[0]}`
REALDIR=`dirname "$REALPATH"`
THIS=`basename "$0"`

usage()
{
  cat << EOF

usage: $0 [options]

Initial setup of the SentientHome Master

OPTIONS:
  --help|-h         Show this message
  --debug|-d        Debug mode

EOF
  exit 1
}

log()
{
  # Common logging format use in place of echo when possible
  echo `date +%Y%m%d%H%M%S%3N` "("$THIS")" "$1" "$2" "$3" "$4" "$5"
}

header()
{
  log SentientHome
  log
  log "Version:        " "$( cd $REALDIR && git describe --tags --always HEAD )"
  log "Dirty Files:    " "$( cd $REALDIR && git status --porcelain )"
  log
  log "Module:         " $THIS
  log "Path:           " "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  log "Realpath:       " $REALDIR
  log "Logfile:        " $LOGFILE
  log "Host:           " `uname -n`
  log "OS:             " `uname -o`
  log "Kernel-Name:    " `uname -s`
  log "Kernel-Release: " `uname -r`
  log "Kernel-Version: " `uname -v`
  log "Machine:        " `uname -m`
  log "Processor:      " `uname -p`
  log "Platform:       " `uname -i`
  log
  log "apt-get:        " `apt-get --version`
  log "git:            " `git --version`
  log "parted:         " `parted --version`
  log "pip:            " `pip --version`
  log "python:         " `python --version`
  log
}

_aptget()
{
  if [ $1 == install ]; then
    log "Installing $2 ..."
  fi
  apt-get -y $1 $2 1>$OPT_OUTPUT

  if [ $? -ne 0 ]; then
    log "üëé  Error apt-get $1 $2"
    exit 10
  fi
}

_linktool()
{
  log "Linking $1 to $2"

  ln -s -f $1 $2

  if [ $? -ne 0 ]; then
    log "üëé  Error linking $1 to $2"
    exit 20
  fi
}

# translate long options to short
for arg
do
  delim=""
  case "${arg}" in
    --help) args="${args}-h ";;
    --force) args="${args}-f ";;
    --debug) args="${args}-d ";;
    # pass through anything else
    *) [[ "${arg:0:1}" == "-" ]] || delim="\""
      args="${args}${delim}${arg}${delim} ";;
  esac
done
# reset the translated args
eval set -- "$args"
# now we can process with getopt
while getopts "hd" opt; do
  case $opt in
    h)  usage ;;
    d)  DEBUG=1 ;;
    \?) usage ;;
    :)
      echo "Option -$OPTARG requires an argument\n"
      usage
    ;;
  esac
done
shift $((OPTIND -1))

# Start by logging environment info
header

if [ $DEBUG -eq 1 ]; then
  set -x
  OPT_OUTPUT="/dev/stdout"
else
  OPT_OUTPUT="/dev/null"
fi

# Update Sentient Home
log "Before Update Revision: " "$( cd $REALDIR && git describe --tags --always HEAD )"
( cd $REALDIR && git pull )
log "After Update Revision: " "$( cd $REALDIR && git describe --tags --always HEAD )"

# Update RPI
log "Checking for Raspberry firmware update ..."
JUST_CHECK=1 rpi-update 1>$OPT_OUTPUT
EXITCODE=$?

if [ $EXITCODE -eq 2 ]; then
  log "Updating Raspberry firmware. This can take a while ..."
  JUST_CHECK=0 rpi-update 1>$OPT_OUTPUT
  REBOOT=1
elif [ $EXITCODE -ne 0 ]; then
  log "üëé  Error checking Raspberry firmware."
  exit 2
else
  log "Firmware already up to date!"
fi

# Update all packages
log "Updating all packages. This can take a while ..."
_aptget update
log "Upgrading all packages ..."
_aptget upgrade

# Re-link all tool in case there ar new ones after the update
log "Re-Linking SentientHome tools to $TARGETPATH ..."

for file in $(find "$SENTIENTHOME_PREFIX"/SentientHome/Linux -executable -type f); do
  _linktool $file $TARGETPATH
done

if [ $? -eq 0 ]; then
  log "üç∫  Finished."
else
  log "üëé  Someting went wrong."
fi

# Optional reboot - check if needed
if [ $REBOOT -eq 1 ]; then
  log "üçÖ  REBOOT REQUIRED!"
  exit 99
fi
