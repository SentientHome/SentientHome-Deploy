#!/bin/bash
# Change root disk to external
# Oliver Ratzesberger
# MIT License

# Setup logger limit to last 10 runs
LOGDIR=/tmp
LOGFILE="$LOGDIR/`basename $0`.`date +%Y%m%d%H%M%S`.log"
exec &> >(tee -a $LOGFILE)
( cd /tmp && rm -f $(ls -1t $LOGDIR/`basename $0`* | tail -n +10) )

# Default settings
DEBUG=0
INITIALIZE=0
NOSWAP=0
CURPARTITION=
NEWDISK=sda
DEFAULTDISK=mmcblk0p2
BACKUPDIR=/root/backups

usage()
{
  cat << EOF
usage: $0 [options]

Setup external root disk and copy content of SD card onto it.

OPTIONS:
  --init|-i         Initialize external drive. Caution: All data on drive will
                    be erased as the drive will get repartitioned and formated.
  --noswap|-n       Do not create a swap partition on the external drive
  --help|-h         Show this message
  --debug|-d        Debug mode

EOF
  exit 1
}

log()
{
  # Common logging format use in place of echo when possible
  me=`basename "$0"`

  echo `date +%Y%m%d%H%M%S%3N` "("$me")" "$1" "$2" "$3" "$4" "$5"
}

header()
{
  # As we are working with sym links we also need to know the real path
  REALPATH=`realpath ${BASH_SOURCE[0]}`
  REALDIR=`dirname "$REALPATH"`

  log SentientHome
  log
  log "Module:         " `basename "$0"`
  log "Path:           " "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  log "Realpath:       " $REALDIR
  log "Logfile:        " $LOGFILE
  log "Host:           " `uname -n`
  log "OS:             " `uname -o`
  log "Kernel-Name:    " `uname -s`
  log "Kernel-Release: " `uname -r`
  log "Kernel-Version: " `uname -v`
  log "Machine:        " `uname -m`
  log "Processor:      " `uname -p`
  log "Platform:       " `uname -i`
  log
  log "git Version:    " `git --version`
  log
  log "git Revision:   " "$( cd $REALDIR && git describe --tags --always HEAD )"
  log "git Dirty:      " "$( cd $REALDIR && git status --porcelain )"
  log
}

_doparted()
{
  log "Executing parted for $1: $2"
  parted --script "$1" "$2" 1>$OPT_OUTPUT

  if [ $? -ne 0 ]; then
    log "üëé  Error executing parted for $1: $2"
    exit 20
  fi
}

_dofs()
{
  log "Creating filesystem $1 on $2"
  $1 "$2" 1>$OPT_OUTPUT

  if [ $? -ne 0 ]; then
    log "üëé  Error creating filesystem $1 on $2"
    exit 30
  fi
}

# translate long options to short
for arg
do
  delim=""
  case "${arg}" in
    --help) args="${args}-h ";;
    --debug) args="${args}-d ";;
    # pass through anything else
    *) [[ "${arg:0:1}" == "-" ]] || delim="\""
      args="${args}${delim}${arg}${delim} ";;
  esac
done
# reset the translated args
eval set -- "$args"
# now we can process with getopt
while getopts "hd" opt; do
  case $opt in
    i)  INITIALIZE=1 ;;
    i)  NOSWAP=1 ;;
    h)  usage ;;
    d)  DEBUG=1 ;;
    \?) usage ;;
    :)
      echo "Option -$OPTARG requires an argument\n"
      usage
    ;;
  esac
done
shift $((OPTIND -1))

# Start by logging environment info
header

if [ $DEBUG -eq 1 ]; then
  set -x
  OPT_OUTPUT="/dev/stdout"
else
  OPT_OUTPUT="/dev/null"
fi

log "Current File systems:"
log $( lsblk --output NAME,SIZE,TYPE,MOUNTPOINT )

CURPARTITION=$( lsblk -P --output NAME,MOUNTPOINT|grep \"/\"$|grep -oP '(?<=\bNAME=)[^ ]+'|tr -d '"' )

log "Current root partition: $CURPARTITION"

# Validate that new disk actually exists
if [ "$NEWDISK" == $( lsblk -P --output NAME,MOUNTPOINT|grep \"$NEWDISK\"$|grep -oP '(?<=\bNAME=)[^ ]+'|tr -d '"' ) ]; then
  log "Target disk verified: $NEWDISK"
else
  log "üëé  New target disk $NEWDISK does not exist."
  exit 2
fi

if [[ "$CURPARTITION" == "$DEFAULTDISK"* ]]; then
  # curent root partition is on the PI's internal SD card
  log "Current root partition $CURPARTITION on $DEFAULTDISK"

  if [ $INITIALIZE -eq 1 ]; then
    log "Partitioning external root drive: /dev/$DISK"
    _doparted /dev/$NEWDISK  "mklabel msdos"
    _doparted /dev/$NEWDISK  "mkpart primary fat16 1MiB 65MB"
    if [ $NOSWAP -eq 0 ]; then
      _doparted /dev/$NEWDISK  "mkpart primary linux-swap(v1) 65MB 4G"
    fi
    _doparted /dev/$NEWDISK  "mkpart primary ext4 4G -1s"

    log "Creating filesystems on external root drive: /dev/$DISK"
    _dofs mkfs.vfat /dev/${NEWDISK}1
    if [ $NOSWAP -eq 0 ]; then
      _dofs mkswap /dev/${NEWDISK}2
    fi
    _dofs mkfs.ext4 -F -j /dev/${NEWDISK}3
  fi

elif [[ "$CURPARTITION" == "$NEWDISK"* ]]; then
  # current root partion is already on the new target disk
  log "Current root partition $CURPARTITION already on new taregt $NEWDISK"
  log "üëé  New target disk $NEWDISK already in use. Nothing to change."
  exit 3
else
  # current root partion is neither on he internal SD card nor target disk
  log "Current root partition $CURPARTITION not on internal SD card $DEFAULTDISK"
  log "üëé  Root partition $CURPARTITION is already on another disk."
  exit 4
fi




# log "Creating backup dir: $BACKUPDIR ..."
# mkdir -p $BACKUPDIR 1>$OPT_OUTPUT
# if [ $? -ne 0 ]; then
#   log "üëé  Error creating backup dir: $BACKUPDIR"
#   exit 2
# fi
#
# BACKUPFILE="$BACKUPDIR/`uname -n`.`date +%Y%m%d%H%M%S`.backup.tar.gz"
# log "Creating backup $BACKUPFILE ..."
# tar --exclude=$BACKUPDIR --one-file-system -cvzf $BACKUPFILE / /boot 1>$OPT_OUTPUT
# if [ $? -ne 0 ]; then
#   log "üëé  Error creating back: $BACKUPFILE"
#   exit 3
# fi
#
# TRIMLIST=$((MAXBACKUPS + 1))
# log "Removing older backups files in $BACKUPDIR ... "
# log $( cd $BACKUPDIR && rm -f $(ls -1t $BACKUPDIR | tail -n +$TRIMLIST) )
# if [ $? -ne 0 ]; then
#   log "üëé  Error removing older backup files in $BACKUPDIR"
#   exit 3
# fi

if [ $? -eq 0 ]; then
  log "üç∫  Finished."
else
  log "üëé  Someting went wrong."
fi
