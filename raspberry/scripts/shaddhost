#!/bin/bash
# Add a new host to the SentientHome Master
# Oliver Ratzesberger
# MIT License

usage()
{
  cat << EOF
usage: $0 [options] hostname-of-rpi

Add a newly created host to the SentientHome Master

OPTIONS:
  --help|-h         Show this message
  --newpassword|-n  Set new root password for host
  --oldpassword|-o  Existing root password for new host default=hypriot

EOF
  exit 1
}

# Default settings
OLD_PASSWD="hypriot"
DEBUG=0

# translate long options to short
for arg
do
  delim=""
  case "${arg}" in
    --help) args="${args}-h ";;
    --newpassword) args="${args}-n ";;
    --oldpassword) args="${args}-o ";;
    --debug) args="${args}-d ";;
    # pass through anything else
    *) [[ "${arg:0:1}" == "-" ]] || delim="\""
      args="${args}${delim}${arg}${delim} ";;
  esac
done
# reset the translated args
eval set -- "$args"
# now we can process with getopt
while getopts "hdn:o:" opt; do
  case $opt in
    h)  usage ;;
    n)  NEW_PASSWD=$OPTARG ;;
    o)  OLD_PASSWD=$OPTARG ;;
    d)  DEBUG=1 ;;
    \?) usage ;;
    :)
      echo "Option -$OPTARG requires an argument\n"
      usage
    ;;
  esac
done
shift $((OPTIND -1))

if [ $DEBUG -eq 1 ]; then
  set -x
  OPT_OUTPUT="/dev/stdout"
else
  OPT_OUTPUT="/dev/null"
fi

HOST=$1

if [ -z "$HOST" ]; then
  echo "No host specified.\n"
  usage
fi

HOST_DOMAIN="${HOST##*.}"
HOST_NAME="${HOST%.*}"

function getip() { (traceroute $1 2>&1 | head -n 1 | cut -d\( -f 2 | cut -d\) -f 1) }
HOST_IP=$(getip ${HOST_NAME}.local)

if [ $? -eq 0 ]; then
  echo "$1 found at $HOST_IP."
else
  echo "$1 could not be located in network."
  exit 2
fi

echo "Removing any existing host keys for $HOST_NAME and $HOST_IP ..."
ssh-keygen -R $HOST_IP
ssh-keygen -R $HOST_NAME

echo "Copying public key to host $HOST_IP ..."

expect 1>$OPT_OUTPUT << EOF
  spawn ssh-copy-id -oStrictHostKeyChecking=no -oCheckHostIP=no root@${HOST_IP}

  expect {
    timeout {
      exit 2
    }
    "password:" {
      send "$OLD_PASSWD\r"
      expect {
        timeout {
          exit 2
        }
        "Permission denied" {
          exit 3
        }
      }
    }
    eof
  }
EOF

if [ $? -eq 3 ]; then
  echo "👎  Incorrect host password."
  exit 3
elif [ $? -eq 2 ]; then
  echo "👎  Key copy timed out."
  exit 2
fi

echo "..."

if [ -n $NEW_PASSWD ]; then
  echo "Changeing password for root@${HOST_IP} ..."
ssh root@$HOST_IP passwd 1>$OPT_OUTPUT << EOF
$NEW_PASSWD
$NEW_PASSWD
EOF
fi

if [ $? -eq 0 ]; then
  echo "🍺  Finished."
else
  echo "👎  Someting went wrong."
fi
