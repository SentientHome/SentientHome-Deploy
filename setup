#!/bin/bash
# Add a new host to the SentientHome Master
# Oliver Ratzesberger
# MIT License

# Setup logger limit to last 10 runs
unbuffer exec &> >(tee -a "/tmp/`basename $0`.`date +%Y%m%d%H%M%S`.log")
( cd /tmp && rm -f $(ls -1t /tmp/`basename $0`* | tail -n +10) )

# Default settings
DEBUG=0
FORCE=0
REBOOT=0

usage()
{
  cat << EOF

usage: $0 [options]

Initial setup of the SentientHome Master

OPTIONS:
  --help|-h         Show this message
  --force|-f        Force generation of new keys. Replace existing
  --debug|-d        Debug mode


EOF
  exit 1
}

log()
{
  # Common logging format use in place of echo when possible
  me=`basename "$0"`

  echo `date +%Y%m%d%H%M%S%3N` "("$me")" "$1" "$2" "$3" "$4" "$5"
}

header()
{
  # As we are working with sym links we also need to know the real path
  REALPATH=`realpath ${BASH_SOURCE[0]}`
  REALDIR=`dirname "$REALPATH"`

  log SentientHome
  log
  log "Module:         " `basename "$0"`
  log "Path:           " "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  log "Realpath:       " $REALDIR
  log "Host:           " `uname -n`
  log "OS:             " `uname -o`
  log "Kernel-Name:    " `uname -s`
  log "Kernel-Release: " `uname -r`
  log "Kernel-Version: " `uname -v`
  log "Machine:        " `uname -m`
  log "Processor:      " `uname -p`
  log "Platform:       " `uname -i`
  log
  log "git Version:    " `git --version`
  log
  log "git Revision:   " "$( cd $REALDIR && git describe --tags --always HEAD )"
  log "git Dirty:      " "$( cd $REALDIR && git status --porcelain )"
  log
}

aptget()
{
  if [ $1 == install ]; then
    log "Installing $2 ..."
  fi
  apt-get -y $1 $2 1>$OPT_OUTPUT

  if [ $? -ne 0 ]; then
    log "👎  Error apt-get $1 $2"
    exit 10
  fi
}

linktool()
{
  log "Linking $1 to $2"

  ln -s -f $1 $2

  if [ $? -ne 0 ]; then
    log "👎  Error linking $1 to $2"
    exit 20
  fi
}

# translate long options to short
for arg
do
  delim=""
  case "${arg}" in
    --help) args="${args}-h ";;
    --force) args="${args}-f ";;
    --debug) args="${args}-d ";;
    # pass through anything else
    *) [[ "${arg:0:1}" == "-" ]] || delim="\""
      args="${args}${delim}${arg}${delim} ";;
  esac
done
# reset the translated args
eval set -- "$args"
# now we can process with getopt
while getopts "hfd" opt; do
  case $opt in
    h)  usage ;;
    f)  FORCE=1 ;;
    d)  DEBUG=1 ;;
    \?) usage ;;
    :)
      echo "Option -$OPTARG requires an argument\n"
      usage
    ;;
  esac
done
shift $((OPTIND -1))

# Start by logging environment info
header

if [ $DEBUG -eq 1 ]; then
  set -x
  OPT_OUTPUT="/dev/stdout"
else
  OPT_OUTPUT="/dev/null"
fi

# Update RPI
log "Checking for Raspberry firmware update ..."
JUST_CHECK=1 rpi-update 1>$OPT_OUTPUT

if [ $? -eq 2 ]; then
  log "Updating Raspberry firmware. This can take a while ..."
  JUST_CHECK=0 rpi-update 1>$OPT_OUTPUT
  REBOOT=1
elif [ $? -ne 0 ]; then
  log "👎  Error checking Raspberry firmware."
  exit 2
fi

# Update all packages
log "Updating all packages. This can take a while ..."
aptget update
log "Upgrading all packages ..."
aptget upgrade

# Install additional packages
aptget install python-dev
aptget install python-pip
aptget install python3
aptget install python3-dev
aptget install python3-pip
aptget install expect
aptget install pass

# Generating ssh key pair
if [ $FORCE -eq 1 ]; then
  RESPONSE="y"
else
  RESPONSE="n"
fi

KEYFILE=/root/.ssh/id_rsa
log "Generating ssh key pair $KEYFILE ..."

expect 1>$OPT_OUTPUT << EOF
  set timeout 120
  spawn ssh-keygen -t rsa -b 4096 -q -P "" -f $KEYFILE

  expect {
    timeout {
      exit 3
    }
    "Overwrite (y/n)?" {
      send $RESPONSE
      send "\r"
      expect {
        timeout {
          exit 4
        }
      }
    }
    eof
  }
EOF

EXITCODE=$?

if [ $EXITCODE -eq 2 ]; then
  log "👎  Key generation timed out. Try again or lower bits"
  exit 5
elif [ $EXITCODE -ne 0 ]; then
  log "👎  Error generating key pair $KEYFILE"
  exit 6
fi

# Now lets install ansible
aptget install ansible

# Link SentientHome scripts
TARGETPATH=/usr/local/bin/
log "Linking SentientHome tools to $TARGETPATH ..."

for file in $(find /root/shDeploy/Linux -executable -type f); do
  linktool $file $TARGETPATH
done

# Backup Master
log "Backing up Master Host. This can take a while ..."
shbackup

# TODO: Prepare externalroot disk
log "Preparing external root disk. This can take a while ..."
# shrootdisk

if [ $? -eq 0 ]; then
  log "🍺  Finished."
else
  log "👎  Someting went wrong."
fi

# Optional reboot - check if needed
if [ $REBOOT -eq 1 ]; then
  log "🍅  REBOOT REQUIRED!"
  exit 99
fi
